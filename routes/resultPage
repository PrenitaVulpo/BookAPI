var curl = require("curl");
var jsdom = require("jsdom");

module.exports = function(app){
    app.get('/resultpage', function(req, res){
        res.header({'Content-Type': 'application/json; charset=utf-8' });
        var bookID = req.query.bookid;
        var book = "https://books.google.com.br/books?id="+bookID+"&sitesec=buy&source=gbs_buy_r";
        var chars = {"headers": {'content-type': 'charset: utf-8', 'content-encoding': 'gzip'}};
        curl.get(book, chars, (err, resp, body)=>{
            if(resp.statusCode === 200){
                var babe = parseData(body);
                res.json(babe);
            }
            else{
                //some error handling
                console.log("error while fetching url");
            }
        });

        function parseData(html){
            const {JSDOM} = jsdom;
            const dom = new JSDOM(html);
            const $ = (require('jquery'))(dom.window);
            const tabela = $("#summary_content table tr td");
            const contator = $("#summary_content table tr").slice(1);
            var retorno = [];
            var nameTest = [];
            var linkTest = [];
            var priceTest = [];


            function strTreatment(linkS) {
                return linkS.substr(71);
            }

            tabela.each(function(){
                    nameTest.push($(this).children("a").text());
                    linkTest.push($(this).children("a").attr("href"));
                    priceTest.push($(this).children(".noprice").text());
                    priceTest.push($(this).children(".price").text());
                }
            );


            //priceTest.push(tabela.children(".price").text());
            nameTest = nameTest.filter(word => !word.length == 0);
            linkTest = linkTest.filter(link => !link == 0);
            linkTest = linkTest.map(strTreatment);
            priceTest = priceTest.filter(preco => !preco == 0);

            var i;
            class Obj {
                constructor(retailerName, price, link) {
                    this.retailerName = retailerName;
                    this.price = price;
                    this.link = link;
                }
            }
            class Convertt {
                constructor(items) {
                    //this.item = name;
                    this.items = items;
                }
            }
            for(i = 0; i<contator.length; i++){
                retorno.push(new Obj(nameTest[i], priceTest[i], linkTest[i]))
                /*
                {
                    retailerName: nameTest[i],
                    price: priceTest[i],
                    link: linkTest[i]
                }
                */

            }




            // Print some information to actor log
            console.log(`URL: %s, TITLE: `, book);
            console.log(nameTest.length);
            console.log(linkTest.length);
            console.log(priceTest);
            //console.log(JSON.stringify(retorno));

            // Manually add a new page to the queue for scraping.
            // To make this work, make sure the "Use request queue" option is enabled.
            //context.enqueueRequest({ url: 'http://www.example.com' });

            // Return an object with the data extracted from the page.
            // It will be stored to the resulting dataset.

            var tt = new Convertt(retorno.reverse());
            return tt

    }

});}